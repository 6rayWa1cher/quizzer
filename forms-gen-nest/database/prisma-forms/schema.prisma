// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../../node_modules/@internal/prisma-forms/client"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FormStatus {
  ok
  deleted
}

model Form {
  id          Int            @id @default(autoincrement())
  name        String         @default("") @db.Text()
  description String         @default("") @db.Text()
  fields      FormField[]
  responses   FormResponse[]
  created_at  DateTime       @default(now())
  pending_id  String?        @db.Text()
  form_status FormStatus     @default(ok)
}

model FormField {
  id               Int                 @default(autoincrement())
  form             Form                @relation(fields: [form_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  form_id          Int
  name             String              @default("") @db.Text()
  description      String              @default("") @db.Text()
  type             String              @db.Text()
  options          FormFieldOption[]
  responses        FormResponseField[]
  correct_answer   String?             @db.Text()

  @@id([id, form_id])
}

model FormFieldOption {
  id            Int       @id @default(autoincrement())
  form_field    FormField @relation(fields: [form_field_id, form_id], references: [id, form_id], onDelete: Cascade, onUpdate: Cascade)
  form_id       Int
  form_field_id Int
  value         String    @default("") @db.Text()
}

model FormResponse {
  id         Int                 @default(autoincrement())
  form       Form                @relation(fields: [form_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  form_id    Int
  fields     FormResponseField[]
  created_at DateTime            @default(now())

  @@id([id, form_id])
}

model FormResponseField {
  id               Int          @default(autoincrement())
  form_field       FormField    @relation(fields: [form_field_id, form_id], references: [id, form_id], onDelete: Cascade, onUpdate: Cascade)
  form_field_id    Int
  form_id          Int
  form_response    FormResponse @relation(fields: [form_response_id, form_id], references: [id, form_id], onDelete: Cascade, onUpdate: Cascade)
  form_response_id Int
  data             String       @default("") @db.Text()
  correct_answer   String?      @db.Text()

  @@id([id, form_field_id, form_response_id])
}

model PendingForm {
  id              String @id @default(uuid())
  name            String @db.Text()
  prompt          String @db.Text()
  questions_count Int
  questions_done  Int    @default(0)
}
