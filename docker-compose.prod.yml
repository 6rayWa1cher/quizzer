version: "3.8"
services:
    traefik:
        image: traefik
        container_name: traefik-service
        command:
            - "--accesslog"
            - "--api.insecure=true"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.websecure.address=:443"
            - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
            - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
            - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
        ports:
            - "80:80"
            - "443:443"
            - "127.0.0.1:8080:8080"
        volumes:
            - "./letsencrypt:/letsencrypt"
            - "/var/run/docker.sock:/var/run/docker.sock:ro"
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.traefik.loadbalancer.server.port=8080"
            - "traefik.http.routers.http-catchall.rule=(HostRegexp(`{host:.+}`))"
            - "traefik.http.routers.http-catchall.entrypoints=web"
            - "traefik.http.routers.http-catchall.middlewares=redirectschememw"
            - "traefik.http.middlewares.redirectschememw.redirectscheme.scheme=https"
        restart: unless-stopped

    postgres:
        image: "postgres:14.4"
        container_name: forms-gen-db-postgres
        restart: "unless-stopped"
        logging:
            options:
                max-size: "50m"
        environment:
            - POSTGRES_USER=root
            - POSTGRES_PASSWORD=root
            - POSTGRES_DB=test
        volumes:
            - pg-data:/var/lib/postgresql/data/

    rabbitmq:
        image: "rabbitmq:3.10.7-management"
        container_name: forms-gen-rabbitmq
        restart: "unless-stopped"
        logging:
            options:
                max-size: "50m"
        ports:
            - "127.0.0.1:15672:15672"
        volumes:
            - ./rabbitmq-data/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
            - ./rabbitmq-data/mnesia-prod/:/var/lib/rabbitmq/mnesia/ # probably should be changed or removed

    forms-rest:
        build:
            context: ./forms-gen-nest
            dockerfile: Dockerfile.forms-rest
        container_name: forms-gen-rest
        depends_on:
            rabbitmq:
                condition: service_started
        restart: "unless-stopped"
        logging:
            options:
                max-size: "50m"
        environment:
            - PORT=8080
            - HOST=0.0.0.0
            - BASE_URL=https://${BASE_HOST}/api
            - AMQP_URL=amqp://guest:guest@rabbitmq:5672
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.forms-rest.rule=(Host(`${BASE_HOST}`) && PathPrefix(`/api`))"
            - "traefik.http.middlewares.forms-rest-stripprefix.stripprefix.prefixes=/api"
            - "traefik.http.routers.forms-rest.middlewares=forms-rest-stripprefix@docker"
            - "traefik.http.routers.forms-rest.entrypoints=websecure"
            - "traefik.http.routers.forms-rest.tls.certresolver=myresolver"
            - "traefik.http.services.forms-rest.loadbalancer.server.port=8080"

    forms-db:
        build:
            context: ./forms-gen-nest
            dockerfile: Dockerfile.forms-db
        container_name: forms-gen-db
        depends_on:
            postgres:
                condition: service_started
            rabbitmq:
                condition: service_started
        restart: "unless-stopped"
        logging:
            options:
                max-size: "50m"
        environment:
            - DATABASE_URL=postgres://root:root@postgres:5432/test
            - AMQP_URL=amqp://rabbitmq:5672
        command: bash -c "echo migrating && npm run prisma:forms-db:migrate --prefix=/app && echo launching && npm run start:forms-db:prod --prefix=/app" # should be removed if migration is not needed

    angular:
        build:
            context: ./forms-gen-angular
            dockerfile: Dockerfile
        container_name: forms-gen-angular
        restart: "unless-stopped"
        logging:
            options:
                max-size: "50m"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.angular.entrypoints=websecure"
            - "traefik.http.routers.angular.rule=(Host(`${BASE_HOST}`))"
            - "traefik.http.routers.angular.tls.certresolver=myresolver"
            - "traefik.http.services.angular.loadbalancer.server.port=80"

    ai-service:
        build:
            context: ./ai-service
            dockerfile: Dockerfile
        depends_on:
            rabbitmq:
                condition: service_started
        container_name: forms-ai-service
        restart: "unless-stopped"
        logging:
            options:
                max-size: "50m"
        environment:
            - "AI_RABBIT_HOST=amqp://rabbitmq:5672"
            - "AI_SERVICE_DO_MOCK=${AI_SERVICE_DO_MOCK}"
        volumes:
          - ai-model-cache:/root/.cache/huggingface
        deploy:
            resources:
                reservations:
                    devices:
                        - driver: nvidia
                          count: all
                          capabilities: [gpu]
volumes:
    pg-data:
    ai-model-cache: